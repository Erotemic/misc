# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
.__heredoc__: &__heredoc__
    - | 

        __doc__="""
        # Note: expand yaml
        yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
         
        # GITLAB LINTER
        https://gitlab.org.com/utils/PYPKG/-/ci/lint

        # This CI file has 4 types of jobs:
        # (1) in the build stage we we build the wheels on a manylinux docker image
        # (2) then in the test stage we install the wheels, run unit tests, and measure coverage
        # (3) after testing we sign the wheels with the CI's GPG key
        # (4) finally if we are on the release branch we will push the signed wheels to pypi
        
        NOTE: THESE INSTRUCTION ARE BEING MOVED AND UPDATED IN THE DEV FOLDER
       

        TEST GITLAB_ORG_PUSH_TOKEN 
        -------------------

        The following script tests if your GITLAB_ORG_PUSH_TOKEN environment variable is correctly setup.

        ```bash
        docker run -it python:3.8 bash
        git clone https://gitlab.org.com/utils/PYPKG.git
        cd kwcoco
        # do sed twice to handle the case of https clone with and without a read token
        git config user.email "ci@gitlab.org.com"
        git config user.name "Gitlab-CI"
        URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
        echo "URL_HOST = $URL_HOST"
        git tag "test-tag4"
        git push --tags "https://${GITLAB_ORG_PUSH_TOKEN}@${URL_HOST}"

        # Cleanup after you verify the tags shows up on the remote
        git push --delete "https://${GITLAB_ORG_PUSH_TOKEN}@${URL_HOST}" test-tag4
        git tag --delete test-tag4
        ```


        """ # "  # hack for vim yml syntax highlighter

stages:
  - build
  - test
  - gpgsign
  - deploy


### TEMPLATES ###
# Define common templates using YAML anchors

.common_template: &common_template
    tags:
        # Tags define which runners will accept which jobs
        - docker
        - linux

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/mb_work/cache_pip"

    except:
        # Don't run the pipeline for new tags
        - tags


.build_template: &build_template
    # Tags define which runners will accept which jobs
    <<: 
        - *common_template

    stage: 
        build
    
    before_script:
        - python -V  # Print out python version for debugging

    script: 
        - python setup.py bdist_wheel --universal

    cache:
        paths:
            - .cache/pip

    artifacts:
        paths:
            - dist/*.whl


.test_full_template: &test_full_template
    # Tags define which runners will accept which jobs
    <<: 
        - *common_template

    stage: 
        test
    
    before_script:
        - python -V  # Print out python version for debugging
        - export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
        - pip install virtualenv
        - virtualenv venv$PYVER
        - source venv$PYVER/bin/activate
        - pip install pip -U
        - pip install pip setuptools -U
        - python -V  # Print out python version for debugging
        - pip install -r requirements.txt
        - pip install .  

    script: 
        - ./run_tests.py

    cache:
        paths:
            - .cache/pip
            - venv/

    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'


.gpgsign_template: &gpgsign_template
    <<: 
        - *common_template

    stage: 
        gpgsign

    script: 
        - export GPG_EXECUTABVE=gpg
        - export GPG_KEYID=$(cat dev/public_gpg_key)
        - echo "GPG_KEYID = $GPG_KEYID"
        - source source dev/secrets_configuration.sh
        # note the variable pointed to by VARNAME_CI_SECRET is a protected variables only available on master and release branch
        - CI_SECRET=${!VARNAME_CI_SECRET}
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        - $GPG_EXECUTABLE --list-keys
        # Decrypt and import GPG Keys / trust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_subkeys.pgp.enc | $GPG_EXECUTABLE --import 
        - $GPG_EXECUTABLE --list-keys  || echo "first one fails for some reason"
        - $GPG_EXECUTABLE --list-keys  
        # The publish script only builds wheels and does gpg signing if DO_UPLOAD is no
        - pip install requests[security] twine 
        - MB_PYTHON_TAG=$MB_PYTHON_TAG DO_GPG=True GPG_KEYID=$GPG_KEYID TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE DEPLOY_BRANCH=release DO_TAG=False DO_UPLOAD=False ./publish.sh 

    artifacts:
        paths:
            - dist/*.asc
            - dist/*.tar.gz
            - dist/*.whl

    only:
        refs:
            # Gitlab will only expose protected variables on protected branches
            # (which I've set to be master and release), so only run this stage
            # there.
            - master
            - release


.deploy_template: &deploy_template
    <<: 
        - *common_template

    stage: 
        deploy

    script: 
        - export GPG_EXECUTABLE=gpg
        - export GPG_KEYID=$(cat dev/public_gpg_key)
        - echo "GPG_KEYID = $GPG_KEYID"
        - source source dev/secrets_configuration.sh
        # note the variable pointed to by VARNAME_CI_SECRET is a protected variables only available on master and release branch
        - CI_SECRET=${!VARNAME_CI_SECRET}
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        - $GPG_EXECUTABLE --list-keys
        # Decrypt and import GPG Keys / trust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_subkeys.pgp.enc | $GPG_EXECUTABLE --import 
        - $GPG_EXECUTABLE --list-keys  || echo "first one fails for some reason"
        - $GPG_EXECUTABLE --list-keys  
        # Install twine
        - pip install six pyopenssl ndg-httpsclient pyasn1 -U 
        - pip install requests[security] twine 
        # Execute the publish script for real this time
        - MB_PYTHON_TAG=$MB_PYTHON_TAG DO_GPG=True GPG_KEYID=$GPG_KEYID TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE CURRENT_BRANCH=release DEPLOY_BRANCH=release DO_TAG=True DO_UPLOAD=True ./publish.sh 
        # Have the server git-tag the release and push the tags
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        # do sed twice to handle the case of https clone with and without a read token
        - | 
            URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g' | sed -e 's|git@||g' | sed -e 's|:|/|g')
            echo "URL_HOST = $URL_HOST"
            # A git config user name and email is required. Set if needed.
            if [[ "$(git config user.email)" == "" ]]; then
                git config user.email "ci@gitlab.org.com"
                git config user.name "Gitlab-CI"
            fi
            if [ $(git tag -l "$VERSION") ]; then
                echo "Tag already exists"
            else
                git tag $VERSION -m "tarball tag $VERSION"
                git push --tags "https://${GITLAB_ORG_PUSH_TOKEN}@${URL_HOST}"
            fi
            
    only:
        refs:
            - release


.build_install_test: &build_install_test
    - pip install -r requirements.txt -U


### JOBS ###
# Define the actual jobs


# ---------------
# Python 3.8 Jobs

build/cp38-cp38-linux:
    <<: 
        - *build_template
    image:
        python:3.8

test_full/cp38-cp38-linux:
    <<: 
        - *test_full_template
    image:
        python:3.8


# for universal builds we only need to gpg sign once
gpgsign/cp38-cp38-linux:
    <<: 
        - *gpgsign_template
    image:
        python:3.8

deploy/cp38-cp38-linux:
    <<: 
        - *deploy_template
    image:
        python:3.8
      

# ---------------
# Python 3.7 Jobs

build/cp37-cp37m-linux:
    <<: 
        - *build_template
    image:
        python:3.7

test_full/cp37-cp37m-linux:
    <<: 
        - *test_full_template
    image:
        python:3.7


# ---------------
# Python 3.6 Jobs

build/cp36-cp36m-linux:
    <<: 
        - *build_template
    image:
        python:3.6

test_full/cp36-cp36m-linux:
    <<: 
        - *test_full_template
    image:
        python:3.6


# ---------------
# Python 3.5 Jobs

build/cp35-cp35m-linux:
    <<: 
        - *build_template
    image:
        python:3.5

test_full/cp35-cp35m-linux:
    <<: 
        - *test_full_template
    image:
        python:3.5


# ---------------
# Python 2.7 Jobs

build/cp27-cp27mu-linux:
    <<: 
        - *build_template
    image:
        python:2.7

test_full/cp27-cp27mu-linux:
    <<: 
        - *test_full_template
    image:
        python:2.7
